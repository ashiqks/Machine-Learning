# -*- coding: utf-8 -*-
"""SklearnRegressor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c7gLhqRTytKRHNvW-zAvEUSJ4dP0ypI4
"""

# import necessary packages
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler # import the StandardScaler class for normalizing the dataset for faster convergence
from sklearn.model_selection import train_test_split #import the function to partition the dataset to train and test sets
from sklearn.linear_model import LinearRegression # import the linear regression model from sklearn
from sklearn.metrics import mean_squared_error # import the function to determine the mean squared error of the model

dataset = pd.read_excel('mlr10.xls') # read the dataset using the pandas package
x = dataset.iloc[:, 0:-1].values # take all rows and columns except the last column as the independent variables and convert it into numpy ndarray
y = dataset.iloc[:, -1].values.reshape(-1, 1) # Take the last column as dependent variable and convert it into a numpy array having one column
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0) # splitting the dataset using the train_test_split where the test data contains 20% of the original dataset
sc_x = StandardScaler() # instantiating an object of the StandardScaler class for the independent variables
sc_y = StandardScaler() # instantiating an object of the StandardScaler class for the dependent variable
x_train = sc_x.fit_transform(x_train) # fitting the independent training set variables and transforming the same
x_test = sc_x.transform(x_test) # transforming the independent testing set variables using the same object used for training set
y_train = sc_y.fit_transform(y_train) # fitting the dependent training set variable and transforming the same
y_test = sc_y.transform(y_test) # # transforming the dependent testing set variable using the same object used for training set

regressor = LinearRegression() # instantiating the object for LinearRegression class
regressor.fit(x_train, y_train) # training linear regression on the training set 

R2_value = regressor.score(x_test, y_test) # computing the R^2 value of training
y_pred = regressor.predict(x_test) # predicting the result using the test set usin the model
loss = mean_squared_error(y_pred, y_test) # analysing the mean squared error 
print('R^2 value: ', R2_value)
print('Loss: ', loss)