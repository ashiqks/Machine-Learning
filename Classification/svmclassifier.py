# -*- coding: utf-8 -*-
"""SVMClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13hADLAkjMsilHo9-NNnZP_5RzXjzeStN
"""

# import necessary modules
from sklearn.datasets import load_breast_cancer # import the wine dataset from sklearn
import numpy as np
from sklearn.preprocessing import MinMaxScaler # import the MinMaxScaler class for feature scaling
from sklearn.model_selection import train_test_split #import the function to partition the dataset to train and test sets
from sklearn.svm import SVC  # load the support vector classifier machine model from sklearn
from sklearn.metrics import confusion_matrix # import the function to create the confusion matrix
from sklearn.model_selection import GridSearchCV # import the GridSearchCV class for hyperparameter tuning

dataset = load_breast_cancer() # load the dataset
x = dataset.data # get the independent variables
y = dataset.target # get the target classes column

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2) # splitting the dataset using the train_test_split where the test data contains 20% of the original dataset

scale = MinMaxScaler() # create an object of MinMaxScaler class with default range of (0, 1)
x_train = scale.fit_transform(x_train) # fit and transform the training independent variable to the MinMaxScaler object
x_test = scale.transform(x_test) # transform the training dependent variable to the MinMaxScaler object

params = {'C': np.random.uniform(0, 1.01, 10),
          'kernel': ['linear', 'rbf', 'poly', 'sigmoid']} # create the hyperparameter tuning space
classification = SVC() # prepare the support vector classification model for hyperparameter tuning 
hypertuning = GridSearchCV(classification, params) # create an object of GridSearchCV with our model and the parameter tuning space 'params'
hypertuning.fit(x_train, y_train) # fit the GridSearchCV object to training dataset
best_score = hypertuning.best_score_ # find the best score of the best estimator returned after fitting the GridSearchCV object
best_estimator = hypertuning.best_estimator_ # retrieve the best estimator from the GridSearchCV 
print('Best Score: ', best_score)
print('Best Estimator Score: ', best_estimator.score(x_test, y_test))

y_pred = best_estimator.predict(x_test) # find the prediction from the best estimator model using the predict method
print(confusion_matrix(y_pred, y_test)) # prints the confusion matrix

